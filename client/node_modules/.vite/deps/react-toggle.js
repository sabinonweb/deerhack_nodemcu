import {
  require_prop_types
} from "./chunk-EWUGABCR.js";
import {
  require_react
} from "./chunk-JG6EVUGA.js";
import {
  __commonJS
} from "./chunk-3EJPJMEH.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/react-toggle/dist/component/check.js
var require_check = __commonJS({
  "node_modules/react-toggle/dist/component/check.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = function() {
      return _react2.default.createElement(
        "svg",
        { width: "14", height: "11", viewBox: "0 0 14 11" },
        _react2.default.createElement("path", { d: "M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0", fill: "#fff", fillRule: "evenodd" })
      );
    };
  }
});

// node_modules/react-toggle/dist/component/x.js
var require_x = __commonJS({
  "node_modules/react-toggle/dist/component/x.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = function() {
      return _react2.default.createElement(
        "svg",
        { width: "10", height: "10", viewBox: "0 0 10 10" },
        _react2.default.createElement("path", { d: "M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12", fill: "#fff", fillRule: "evenodd" })
      );
    };
  }
});

// node_modules/react-toggle/dist/component/util.js
var require_util = __commonJS({
  "node_modules/react-toggle/dist/component/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.pointerCoord = pointerCoord;
    function pointerCoord(event) {
      if (event) {
        var changedTouches = event.changedTouches;
        if (changedTouches && changedTouches.length > 0) {
          var touch = changedTouches[0];
          return { x: touch.clientX, y: touch.clientY };
        }
        var pageX = event.pageX;
        if (pageX !== void 0) {
          return { x: pageX, y: event.pageY };
        }
      }
      return { x: 0, y: 0 };
    }
  }
});

// node_modules/react-toggle/dist/component/index.js
var require_component = __commonJS({
  "node_modules/react-toggle/dist/component/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _classnames = require_classnames();
    var _classnames2 = _interopRequireDefault(_classnames);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _check = require_check();
    var _check2 = _interopRequireDefault(_check);
    var _x = require_x();
    var _x2 = _interopRequireDefault(_x);
    var _util = require_util();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Toggle = function(_PureComponent) {
      _inherits(Toggle2, _PureComponent);
      function Toggle2(props) {
        _classCallCheck(this, Toggle2);
        var _this = _possibleConstructorReturn(this, (Toggle2.__proto__ || Object.getPrototypeOf(Toggle2)).call(this, props));
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleTouchStart = _this.handleTouchStart.bind(_this);
        _this.handleTouchMove = _this.handleTouchMove.bind(_this);
        _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);
        _this.handleFocus = _this.handleFocus.bind(_this);
        _this.handleBlur = _this.handleBlur.bind(_this);
        _this.previouslyChecked = !!(props.checked || props.defaultChecked);
        _this.state = {
          checked: !!(props.checked || props.defaultChecked),
          hasFocus: false
        };
        return _this;
      }
      _createClass(Toggle2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (prevProps.checked !== this.props.checked) {
            this.setState({ checked: !!this.props.checked });
          }
        }
      }, {
        key: "handleClick",
        value: function handleClick(event) {
          if (this.props.disabled) {
            return;
          }
          var checkbox = this.input;
          if (event.target !== checkbox && !this.moved) {
            this.previouslyChecked = checkbox.checked;
            event.preventDefault();
            checkbox.focus();
            checkbox.click();
            return;
          }
          var checked = this.props.hasOwnProperty("checked") ? this.props.checked : checkbox.checked;
          this.setState({ checked });
        }
      }, {
        key: "handleTouchStart",
        value: function handleTouchStart(event) {
          if (this.props.disabled) {
            return;
          }
          this.startX = (0, _util.pointerCoord)(event).x;
          this.activated = true;
        }
      }, {
        key: "handleTouchMove",
        value: function handleTouchMove(event) {
          if (!this.activated)
            return;
          this.moved = true;
          if (this.startX) {
            var currentX = (0, _util.pointerCoord)(event).x;
            if (this.state.checked && currentX + 15 < this.startX) {
              this.setState({ checked: false });
              this.startX = currentX;
              this.activated = true;
            } else if (currentX - 15 > this.startX) {
              this.setState({ checked: true });
              this.startX = currentX;
              this.activated = currentX < this.startX + 5;
            }
          }
        }
      }, {
        key: "handleTouchEnd",
        value: function handleTouchEnd(event) {
          if (!this.moved)
            return;
          var checkbox = this.input;
          event.preventDefault();
          if (this.startX) {
            var endX = (0, _util.pointerCoord)(event).x;
            if (this.previouslyChecked === true && this.startX + 4 > endX) {
              if (this.previouslyChecked !== this.state.checked) {
                this.setState({ checked: false });
                this.previouslyChecked = this.state.checked;
                checkbox.click();
              }
            } else if (this.startX - 4 < endX) {
              if (this.previouslyChecked !== this.state.checked) {
                this.setState({ checked: true });
                this.previouslyChecked = this.state.checked;
                checkbox.click();
              }
            }
            this.activated = false;
            this.startX = null;
            this.moved = false;
          }
        }
      }, {
        key: "handleFocus",
        value: function handleFocus(event) {
          var onFocus = this.props.onFocus;
          if (onFocus) {
            onFocus(event);
          }
          this.setState({ hasFocus: true });
        }
      }, {
        key: "handleBlur",
        value: function handleBlur(event) {
          var onBlur = this.props.onBlur;
          if (onBlur) {
            onBlur(event);
          }
          this.setState({ hasFocus: false });
        }
      }, {
        key: "getIcon",
        value: function getIcon(type) {
          var icons = this.props.icons;
          if (!icons) {
            return null;
          }
          return icons[type] === void 0 ? Toggle2.defaultProps.icons[type] : icons[type];
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props = this.props, className = _props.className, _icons = _props.icons, inputProps = _objectWithoutProperties(_props, ["className", "icons"]);
          var classes = (0, _classnames2.default)("react-toggle", {
            "react-toggle--checked": this.state.checked,
            "react-toggle--focus": this.state.hasFocus,
            "react-toggle--disabled": this.props.disabled
          }, className);
          return _react2.default.createElement(
            "div",
            {
              className: classes,
              onClick: this.handleClick,
              onTouchStart: this.handleTouchStart,
              onTouchMove: this.handleTouchMove,
              onTouchEnd: this.handleTouchEnd
            },
            _react2.default.createElement(
              "div",
              { className: "react-toggle-track" },
              _react2.default.createElement(
                "div",
                { className: "react-toggle-track-check" },
                this.getIcon("checked")
              ),
              _react2.default.createElement(
                "div",
                { className: "react-toggle-track-x" },
                this.getIcon("unchecked")
              )
            ),
            _react2.default.createElement("div", { className: "react-toggle-thumb" }),
            _react2.default.createElement("input", _extends({}, inputProps, {
              ref: function ref(_ref) {
                _this2.input = _ref;
              },
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              className: "react-toggle-screenreader-only",
              type: "checkbox"
            }))
          );
        }
      }]);
      return Toggle2;
    }(_react.PureComponent);
    exports.default = Toggle;
    Toggle.displayName = "Toggle";
    Toggle.defaultProps = {
      icons: {
        checked: _react2.default.createElement(_check2.default, null),
        unchecked: _react2.default.createElement(_x2.default, null)
      }
    };
    Toggle.propTypes = {
      checked: _propTypes2.default.bool,
      disabled: _propTypes2.default.bool,
      defaultChecked: _propTypes2.default.bool,
      onChange: _propTypes2.default.func,
      onFocus: _propTypes2.default.func,
      onBlur: _propTypes2.default.func,
      className: _propTypes2.default.string,
      name: _propTypes2.default.string,
      value: _propTypes2.default.string,
      id: _propTypes2.default.string,
      "aria-labelledby": _propTypes2.default.string,
      "aria-label": _propTypes2.default.string,
      icons: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.shape({
        checked: _propTypes2.default.node,
        unchecked: _propTypes2.default.node
      })])
    };
  }
});
export default require_component();
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-toggle.js.map
